{"version":3,"sources":["components/ComponentProvider.js","components/HOC.js","App.js","index.js"],"names":["ComponentContext","React","createContext","data","ComponentProvider","children","useQuery","gql","loading","error","contextValue","Provider","value","ListMaker","obj","str","indicator","treeClose","useContext","useState","isOpen","setOpen","useEffect","hasOwnProperty","className","onClick","console","log","name","length","map","el","i","arr","App","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"8PAOaA,EAAmBC,IAAMC,cAAc,CAClDC,KAAM,KAGKC,EAAoB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClC,EAAiCC,YAASC,YAAA,IAAD,8QAAjCC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAON,EAAxB,EAAwBA,KAiBxB,GAAIK,EAAS,OAAO,2CACpB,GAAIC,EAAO,OAAO,yCAElB,IAAMC,EAAe,CACnBP,QAGF,OACE,cAACH,EAAiBW,SAAlB,CAA2BC,MAAOF,EAAlC,SACGL,K,gBClCMQ,EAAY,SAAZA,EAAa,GAA6B,IAA3BC,EAA0B,EAA1BA,IAAKC,EAAqB,EAArBA,IAAKC,EAAgB,EAAhBA,UAC5BC,EAAcC,qBAAWlB,GAAzBiB,UACR,EAA0BE,oBAAS,GAAnC,mBAAOC,EAAP,KAAeC,EAAf,KAiBA,OANAC,qBAAU,WACHR,EAAIS,eAAe,SACtBF,GAAQ,KAET,IAGD,sBAAKG,UAAS,gBAAWT,GAAzB,UACGD,EAAIS,eAAe,SAClB,mCACG,wBAAQE,QAAS,kBAAcX,EAAIT,eAlBtCS,EAAIS,eAAe,aAAeP,GACpCC,EAAUI,EAASP,EAAIT,UACvBqB,QAAQC,IAAI,IAEZN,GAAQ,KAc2CG,UAAS,OAAvD,SACEV,EAAIc,SAIVd,EAAIS,eAAe,aAClBT,EAAIT,SAASwB,OAAS,GACtBf,EAAIT,SAASyB,KAAI,SAACC,EAAIC,EAAGC,GACvB,OAAO,mCACJb,GACD,cAACP,EAAD,CACEC,IAAKiB,EAELf,UAAWgB,IAAMC,EAAIJ,OAAS,GADzBG,YCzBJE,MANf,WACE,IAAQ/B,EAASe,qBAAWlB,GAApBG,KAER,OAAO,cAAC,EAAD,CAAWW,IAAKX,EAAMY,IAAK,gB,wBCI9BoB,EAAS,IAAIC,IAAa,CAC9BC,IAAK,sCACLC,MAAO,IAAIC,MAGbC,IAASC,OACP,cAACC,EAAA,EAAD,CAAgBP,OAAQA,EAAxB,SACE,cAAC,EAAD,UACE,cAAC,EAAD,QAGJQ,SAASC,eAAe,W","file":"static/js/main.cccd4b39.chunk.js","sourcesContent":["import React from 'react';\n\nimport {\n  gql,\n  useQuery,\n} from \"@apollo/client\";\n\nexport const ComponentContext = React.createContext({\n  data: {},\n})\n\nexport const ComponentProvider = ({ children }) => {\n  const { loading, error, data } = useQuery(gql`\n    query {\n      children: continents {\n        name\n        code\n        children: countries {\n          name\n          code\n          children: languages {\n            name\n            code\n          }\n        }\n      }\n    }\n  `);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  const contextValue = {\n    data,\n  }\n\n  return (\n    <ComponentContext.Provider value={contextValue}>\n      {children}\n    </ComponentContext.Provider>\n  )\n}\n","import React, { useContext, useEffect, useState } from 'react';\n\nimport { ComponentContext } from './ComponentProvider';\n\nexport const ListMaker = ({ obj, str, indicator }) => {\n  const { treeClose } = useContext(ComponentContext);\n  const [isOpen, setOpen] = useState(false);\n\n  const onClick = () => {\n    if(!obj.hasOwnProperty(\"children\") && indicator) {\n      treeClose(setOpen, obj.children)\n      console.log(6);\n    } else {\n      setOpen(true);\n    }\n  }\n\n  useEffect(() => {\n    if (!obj.hasOwnProperty(\"name\")) {\n      setOpen(true);\n    }\n  }, [])\n\n  return (\n    <div className={`group ${str}`}>\n      {obj.hasOwnProperty('name') &&\n        <>\n          {<button onClick={() => onClick(obj.children)} className={`node`}>\n            {obj.name}\n          </button>}\n        </>\n      }\n      {obj.hasOwnProperty('children') &&\n        obj.children.length > 0 &&\n        obj.children.map((el, i, arr) => {\n          return <>\n            {isOpen &&\n            <ListMaker\n              obj={el}\n              key={i}\n              indicator={i === arr.length - 1}\n            />}\n          </>\n        })\n      }\n    </div>\n\n//     <div className=\"group\">\n//   {obj.hasOwnProperty(\"children\") &&\n//     obj.children.length > 0 &&\n//     obj.children.map((el, i, arr) => {\n//       return <div className=\"item\">\n//         {el.hasOwnProperty(\"name\") &&\n//           <>\n//             <button onClick={onClick} className=\"node\">\n//               {el.name}\n//             </button>\n//             {isGlobalOpen && <ListMaker obj={el} key={i} />}\n//           </>\n//         }\n//       </div>\n//     })}\n// </div>\n  )\n}\n","import React, { useContext } from 'react';\n\nimport { ComponentContext } from './components/ComponentProvider';\n\nimport './App.css';\nimport { ListMaker } from './components/HOC'\n\n\nfunction App() {\n  const { data } = useContext(ComponentContext);\n\n  return <ListMaker obj={data} str={'continents'} />\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { ComponentProvider } from './components/ComponentProvider';\n\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  // gql,\n} from \"@apollo/client\";\n\n// export const dataFromServer = (string) => gql`${string}`;\n\nconst client = new ApolloClient({\n  uri: 'https://countries.trevorblades.com/',\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ComponentProvider>\n      <App />\n    </ComponentProvider>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}