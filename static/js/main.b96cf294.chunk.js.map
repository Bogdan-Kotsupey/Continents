{"version":3,"sources":["components/ComponentProvider.js","components/HOC.js","App.js","index.js"],"names":["ComponentContext","React","createContext","data","ComponentProvider","children","useQuery","gql","loading","error","contextValue","Provider","value","ListMaker","obj","isTreeOpen","setTreeOpen","indicator","useState","isOpen","setOpen","useEffect","className","onClick","hasOwnProperty","name","map","el","i","arr","length","ParentList","item","App","useContext","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"8PAOaA,EAAmBC,IAAMC,cAAc,CAClDC,KAAM,KAGKC,EAAoB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClC,EAAiCC,YAASC,YAAA,IAAD,8QAAjCC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAON,EAAxB,EAAwBA,KAiBxB,GAAIK,EAAS,OAAO,2CACpB,GAAIC,EAAO,OAAO,yCAElB,IAAMC,EAAe,CACnBP,QAGF,OACE,cAACH,EAAiBW,SAAlB,CAA2BC,MAAOF,EAAlC,SACGL,K,gBCpCMQ,EAAY,SAAZA,EAAa,GAAqD,IAAnDC,EAAkD,EAAlDA,IAAKC,EAA6C,EAA7CA,WAAYC,EAAiC,EAAjCA,YAAiC,IAApBC,iBAAoB,MAAR,EAAQ,EAC5E,EAA0BC,oBAAS,GAAnC,mBAAOC,EAAP,KAAeC,EAAf,KAiBA,OANAC,qBAAU,WACJN,GACFK,GAAQ,KAET,CAACL,IAGF,sBAAKO,UAAU,QAAf,UACE,wBAAQC,QAjBI,YACTT,EAAIU,eAAe,aAAeP,EACrCD,GAAY,IAEZI,GAAQ,GACRJ,GAAY,KAYcM,UAAU,OAApC,SACGR,EAAIW,OAENX,EAAIU,eAAe,aAClBV,EAAIT,SAASqB,KAAI,SAACC,EAAIC,EAAGC,GAAR,OACf,cAAC,WAAD,UACGV,GACC,cAACN,EAAD,CACEC,IAAKa,EACLZ,WAAYA,EACZC,YAAaA,EACbC,UAAWW,IAAMC,EAAIC,OAAS,KANrBF,UAeZG,EAAa,SAAC,GAAa,IAAXjB,EAAU,EAAVA,IAC3B,EAA0BI,oBAAS,GAAnC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAkCF,oBAAS,GAA3C,mBAAOH,EAAP,KAAmBC,EAAnB,KAEAK,qBAAU,WACJN,GACFK,GAAQ,KAET,CAACL,IAMJ,OACE,sBAAKO,UAAU,cAAf,UACE,wBAAQC,QANI,WACdH,GAAQ,IAKoBE,UAAU,cAApC,SACGR,EAAIW,OAENX,EAAIT,UAAYS,EAAIT,SAASqB,KAAI,SAAAM,GAAI,OACpC,cAAC,WAAD,UACGb,GACC,cAAC,EAAD,CACEL,IAAKkB,EACLjB,WAAYA,EACZC,YAAaA,KALJgB,EAAKP,aC5CbQ,MAVf,WACE,IAAQ9B,EAAS+B,qBAAWlC,GAApBG,KAER,OAAO,qBAAKmB,UAAU,eAAf,SACJnB,EAAKE,SAASqB,KAAI,SAAAM,GAAI,OACrB,cAAC,EAAD,CAAYlB,IAAKkB,U,wBCEjBG,EAAS,IAAIC,IAAa,CAC9BC,IAAK,sCACLC,MAAO,IAAIC,MAGbC,IAASC,OACP,cAACC,EAAA,EAAD,CAAgBP,OAAQA,EAAxB,SACE,cAAC,EAAD,UACE,cAAC,EAAD,QAGJQ,SAASC,eAAe,W","file":"static/js/main.b96cf294.chunk.js","sourcesContent":["import React from 'react';\n\nimport {\n  gql,\n  useQuery,\n} from \"@apollo/client\";\n\nexport const ComponentContext = React.createContext({\n  data: {},\n})\n\nexport const ComponentProvider = ({ children }) => {\n  const { loading, error, data } = useQuery(gql`\n    query {\n      children: continents {\n        name\n        code\n        children: countries {\n          name\n          code\n          children: languages {\n            name\n            code\n          }\n        }\n      }\n    }\n  `);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  const contextValue = {\n    data,\n  }\n\n  return (\n    <ComponentContext.Provider value={contextValue}>\n      {children}\n    </ComponentContext.Provider>\n  )\n}\n","import React, { useEffect, useState, Fragment } from 'react';\n\nexport const ListMaker = ({ obj, isTreeOpen, setTreeOpen, indicator = 0 }) => {\n  const [isOpen, setOpen] = useState(false);\n\n  const onClick = () => {\n    if (!obj.hasOwnProperty(\"children\") && indicator) {\n      setTreeOpen(true);\n    } else {\n      setOpen(true);\n      setTreeOpen(false);\n    }\n  }\n\n  useEffect(() => {\n    if (isTreeOpen) {\n      setOpen(false)\n    }\n  }, [isTreeOpen]);\n\n  return (\n    <div className=\"group\">\n      <button onClick={onClick} className=\"node\">\n        {obj.name}\n      </button>\n      {obj.hasOwnProperty(\"children\") &&\n        obj.children.map((el, i, arr) =>\n          <Fragment key={i}>\n            {isOpen &&\n              <ListMaker\n                obj={el}\n                isTreeOpen={isTreeOpen}\n                setTreeOpen={setTreeOpen}\n                indicator={i === arr.length - 1}\n              />}\n          </Fragment>\n        )\n      }\n    </div>\n  )\n}\n\nexport const ParentList = ({ obj }) => {\n  const [isOpen, setOpen] = useState(false);\n  const [isTreeOpen, setTreeOpen] = useState(false);\n\n  useEffect(() => {\n    if (isTreeOpen) {\n      setOpen(false)\n    }\n  }, [isTreeOpen]);\n\n  const onClick = () => {\n    setOpen(true);\n  }\n\n  return (\n    <div className=\"parent-item\">\n      <button onClick={onClick} className=\"parent-node\">\n        {obj.name}\n      </button>\n      {obj.children && obj.children.map(item => (\n        <Fragment key={item.name}>\n          {isOpen &&\n            <ListMaker\n              obj={item}\n              isTreeOpen={isTreeOpen}\n              setTreeOpen={setTreeOpen}\n            />\n          }\n        </Fragment>\n      ))}\n    </div>\n  )\n}\n","import React, { useContext } from 'react';\n\nimport { ComponentContext } from './components/ComponentProvider';\n\nimport './App.css';\nimport { ParentList } from './components/HOC'\n\n\nfunction App() {\n  const { data } = useContext(ComponentContext);\n\n  return <div className=\"parent-group\">\n    {data.children.map(item => (\n      <ParentList obj={item} />\n    ))}\n  </div>\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { ComponentProvider } from './components/ComponentProvider';\n\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  // gql,\n} from \"@apollo/client\";\n\n// export const dataFromServer = (string) => gql`${string}`;\n\nconst client = new ApolloClient({\n  uri: 'https://countries.trevorblades.com/',\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ComponentProvider>\n      <App />\n    </ComponentProvider>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}