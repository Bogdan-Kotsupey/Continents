{"version":3,"sources":["components/ComponentProvider.js","components/Countries.js","components/Continents.js","App.js","index.js"],"names":["ComponentContext","React","createContext","HOC","ComponentSchema","simpleHOC","data","ComponentProvider","children","contextValue","Component","searchString","filter","nextSearch","useQuery","gql","loading","error","console","log","localStorage","setItem","array","map","el","name","code","obj","string","Provider","value","Countries","useContext","countrie","languages","Continents","App","continents","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"gQAOaA,EAAmBC,IAAMC,cAAc,CAClDC,IAAK,aACLC,gBAAiB,aACjBC,UAAW,aACXC,KAAM,KAGKC,EAAoB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAuE5BC,EAAe,CACnBN,IAzDU,SAACO,EAAWC,EAAcC,EAAQC,GAC5C,MAAiCC,YAASC,YAAA,IAAD,+HAEnCJ,EAAeC,EAGbC,IALAG,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOX,EAAxB,EAAwBA,KA4BxB,GAnBAY,QAAQC,IAAIb,GAmBRU,EAAS,OAAO,2CACpB,GAAIC,EAAO,OAAO,yCAElBG,aAAaC,QAAQ,OAAQf,GAE7B,IAAMgB,EAAQhB,EAAK,GAAD,OAAIK,IAEtB,OAAO,cAACD,EAAD,CAAWY,MAAOA,KAsBzBlB,gBAxEsB,SAAC,GAAD,IAAGkB,EAAH,EAAGA,MAAH,OACtB,6BACGA,EAAMC,KAAI,SAAAC,GAAE,OACX,6BACGA,EAAGC,MADGD,EAAGE,YAsEhBrB,UA/DgB,SAACK,EAAWiB,EAAKC,GACjC,OAAO,cAAClB,EAAD,CAAWY,MAAOK,EAAI,GAAD,OAAIC,OA+DhCtB,KAAMc,aAAad,MAGrB,OACE,cAACN,EAAiB6B,SAAlB,CAA2BC,MAAOrB,EAAlC,SACGD,KC7EMuB,EAAY,SAAC,GAAe,IAAbT,EAAY,EAAZA,MAC1B,EAA2BU,qBAAWhC,GAAtC,EAAQG,IAAR,EAAaE,UAEb,OACE,6BACGiB,EAAMC,KAAI,SAAAU,GAAQ,OACjB,+BACGA,EAASR,KACV,6BACGQ,EAASC,UAAUX,KAAI,SAAAC,GAAE,OACxB,6BACGA,EAAGC,cALHQ,EAASP,YCdbS,EAAa,SAAC,GAAe,IAAbb,EAAY,EAAZA,MAC3B,EAAgCU,qBAAWhC,GAAnCG,EAAR,EAAQA,IAAR,EAAaC,gBAGb,OAAO,mCACL,6BACGkB,EAAMC,KAAI,SAAAC,GAAE,OACX,+BACGA,EAAGC,KACHtB,EAAI4B,EAAW,YAAZ,uCAAyDP,EAAGE,KAA5D,gCAFGF,EAAGE,c,MCmCLU,MAnCf,WAKE,MAAiCtB,YAASC,YAAA,MAAD,oKAAjCC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOX,EAAxB,EAAwBA,KAe1B,GAFAY,QAAQC,IAAIb,GAERU,EAAS,OAAO,2CACpB,GAAIC,EAAO,OAAO,yCAElB,IAAMK,EAAQhB,EAAK+B,WAEjB,OACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAYf,MAAOA,O,wBC5BnBgB,EAAS,IAAIC,IAAa,CAC9BC,IAAK,sCACLC,MAAO,IAAIC,MAGbC,IAASC,OACP,cAACC,EAAA,EAAD,CAAgBP,OAAQA,EAAxB,SACE,cAAC,EAAD,MAEFQ,SAASC,eAAe,W","file":"static/js/main.e7f373a2.chunk.js","sourcesContent":["import React from 'react';\n\nimport {\n  gql,\n  useQuery,\n} from \"@apollo/client\";\n\nexport const ComponentContext = React.createContext({\n  HOC: () => { },\n  ComponentSchema: () => { },\n  simpleHOC: () => {},\n  data: {},\n})\n\nexport const ComponentProvider = ({ children }) => {\n  const ComponentSchema = ({ array }) => (\n    <ul>\n      {array.map(el => (\n        <li key={el.code}>\n          {el.name}\n        </li>\n      ))}\n    </ul>\n  )\n\n  const simpleHOC = (Component, obj, string) => {\n    return <Component array={obj[`${string}`]} />\n  }\n\n  const HOC = (Component, searchString, filter, nextSearch) => {\n    const { loading, error, data } = useQuery(gql`\n      query {\n        ${searchString}${filter} {\n          code\n          name\n          ${nextSearch}\n        }\n      }\n    `);\n    console.log(data);\n\n    // const { loading, error, data } = useQuery(gql`\n    //   query {\n    //     continents {\n    //       code\n    //       name\n    //       countries {\n    //         code\n    //         name\n    //         languages {\n    //           name\n    //         }\n    //       }\n    //     }\n    //   }\n    // `);\n    // console.log(data);\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n\n    localStorage.setItem('data', data)\n\n    const array = data[`${searchString}`];\n\n    return <Component array={array} />\n  }\n\n//   const { loading, error, data } = useQuery(gql`\n//   query {\n//     continents {\n//       code\n//       name\n//       countries {\n//         code\n//         name\n//         languages {\n//           name\n//         }\n//       }\n//     }\n//   }\n// `);\n// console.log(data);\n\n  const contextValue = {\n    HOC,\n    ComponentSchema,\n    simpleHOC,\n    data: localStorage.data,\n  }\n\n  return (\n    <ComponentContext.Provider value={contextValue}>\n      {children}\n    </ComponentContext.Provider>\n  )\n}\n","import { useContext } from 'react';\nimport { ComponentContext } from './ComponentProvider';\n\nimport {\n  useQuery,\n  gql,\n} from \"@apollo/client\";\n\n// export const Countries = () => {\n//   const { ComponentSchema, HOC } = useContext(ComponentContext);\n\n//   return HOC(ComponentSchema, 'countries');\n// }\n\nimport React from 'react';\nimport { Languages } from './Languages';\n\nexport const Countries = ({ array }) => {\n  const { HOC, simpleHOC } = useContext(ComponentContext);\n\n  return (\n    <ul>\n      {array.map(countrie => (\n        <li key={countrie.code}>\n          {countrie.name}\n          <ul>\n            {countrie.languages.map(el => (\n              <li>\n                {el.name}\n              </li>\n            ))}\n          </ul>\n        </li>\n      ))}\n    </ul>\n  )\n}\n","import { useContext } from 'react';\nimport { ComponentContext } from './ComponentProvider'\nimport { Countries } from './Countries';\n\n// export const Continents = ({ array }) => {\n//   const { ComponentSchema } = useContext(ComponentContext)\n//   return <ComponentSchema array={array} />\n// }\n\nexport const Continents = ({ array }) => {\n  const { HOC, ComponentSchema} = useContext(ComponentContext);\n  // const lol = `countries (filter: { continent: { eq: ${el.name}}})`;\n\n  return <>\n    <ul>\n      {array.map(el => (\n        <li key={el.code}>\n          {el.name}\n          {HOC(Countries, 'countries', `(filter: { continent: { eq: \"${el.code}\"}})`, `languages { name }`)}\n          {/* {el.isArray && } */}\n        </li>\n      ))}\n    </ul>\n  </>\n}\n\n//   return (\n//     <>\n//       {/* {HOC(ComponentSchema, 'countries', `countries( filter: { currency: { eq: \"EUR\" } } )`)} */}\n//       <ComponentSchema array={array} />\n//     </>\n//   )\n// }\n\n// import {\n//   useQuery,\n//   gql,\n// } from \"@apollo/client\";\n\n// export const Continents = () => {\n//   const { loading, error, data } = useQuery(gql`\n//   query {\n//     continents {\n//       code\n//       name\n//       countries {\n//         code\n//         name\n//         languages {\n//           code\n//           name\n//         }\n//       }\n//     }\n//   }\n//   `);\n//   console.log(data);\n\n//   if (loading) return <p>Loading...</p>;\n//   if (error) return <p>Error :(</p>;\n\n//   return (\n//     <>\n//       <ul>\n//         {data.continents.map(continent => (\n//           <li key={continent.code}>\n//             <div>\n//               {continent.name}\n//             </div>\n//           </li>\n//         ))}\n//       </ul>\n//     </>\n//   )\n// }\n","import React, { useContext } from 'react';\n\nimport { Continents } from './components/Continents';\n// import { Countries } from './components/Countries';\n// import { Languages } from './components/Languages';\n\nimport { ComponentProvider, ComponentContext } from './components/ComponentProvider';\n\nimport './App.css';\n\nimport {\n  useQuery,\n  gql,\n} from \"@apollo/client\";\n\n\nfunction App() {\n  // const { data, simpleHOC } = useContext(ComponentContext);\n  // const WrapedContinents = simpleHOC(Continents, data, '—Åontinents')\n  // const WrapedCountries = simpleHOC(Continents, data, 'countries')\n  // const WrapedLanguages = simpleHOC(Continents, data, 'languages')\n  const { loading, error, data } = useQuery(gql`\n  query {\n    continents {\n      code\n      name\n      countries {\n        continent {\n          code\n        }\n      }\n    }\n  }\n`);\nconsole.log(data);\n\nif (loading) return <p>Loading...</p>;\nif (error) return <p>Error :(</p>;\n\nconst array = data.continents;\n\n  return (\n    <ComponentProvider>\n      <Continents array={array}/>\n      {/* <WrapedContinents /> */}\n      {/* <Countries /> */}\n      {/* <Languages /> */}\n    </ComponentProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  // gql,\n} from \"@apollo/client\";\n\n// export const dataFromServer = (string) => gql`${string}`;\n\n\nconst client = new ApolloClient({\n  uri: 'https://countries.trevorblades.com/',\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}